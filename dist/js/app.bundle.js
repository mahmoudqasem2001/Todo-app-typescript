(()=>{"use strict";var t={812:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getDataFromLocalStorage=e.saveDataToLocalStorage=void 0,e.saveDataToLocalStorage=function(t,e){localStorage.setItem(t,JSON.stringify(e))},e.getDataFromLocalStorage=function(t){var e=localStorage.getItem(t);return e?JSON.parse(e):null}},702:function(t,e,a){var s=this&&this.__assign||function(){return s=Object.assign||function(t){for(var e,a=1,s=arguments.length;a<s;a++)for(var n in e=arguments[a])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t},s.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.ToDoListImpl=void 0;var n=a(812),i=function(){function t(){this.tasks=[]}return t.prototype.addTask=function(t){this.tasks.unshift(t),(0,n.saveDataToLocalStorage)("tasks",this.tasks)},t.prototype.deleteTask=function(t){this.tasks=this.tasks.filter((function(e){return e.id!==t})),(0,n.saveDataToLocalStorage)("tasks",this.tasks)},t.prototype.editTask=function(t){var e=t.id,a=t.newName;this.tasks=this.tasks.map((function(t){return t.id===e?s(s({},t),{name:a}):t})),(0,n.saveDataToLocalStorage)("tasks",this.tasks)},t.prototype.toggleTaskCompletion=function(t){this.tasks=this.tasks.map((function(e){return e.id===t&&(e.completed=!e.completed),e}))},t.prototype.filterTasks=function(t){switch(t){case"active":return this.tasks.filter((function(t){return!t.completed}));case"completed":return this.tasks.filter((function(t){return t.completed}));default:return this.tasks}},t.prototype.clearCompletedTasks=function(){this.tasks=this.tasks.filter((function(t){return!t.completed})),(0,n.saveDataToLocalStorage)("tasks",this.tasks)},t}();e.ToDoListImpl=i}},e={};function a(s){var n=e[s];if(void 0!==n)return n.exports;var i=e[s]={exports:{}};return t[s].call(i.exports,i,i.exports,a),i.exports}(()=>{var t=a(702),e=a(812),s=a(812),n=new t.ToDoListImpl,i=document.getElementById("allButton"),o=document.getElementById("activeButton"),d=document.getElementById("completedButton"),r=document.getElementById("clearCompletedButton"),l=document.getElementById("addTaskModal"),c=document.getElementById("addTaskButton"),u=document.getElementById("closeAddTaskModal"),m=document.getElementById("addNewTask");function v(){l.classList.add("hidden")}function k(t){!function(t){document.querySelectorAll("button[data-filter]").forEach((function(t){return t.classList.remove("bg-blue-500","text-white")})),t.classList.add("bg-blue-500","rounded-md","text-white");var e=t.dataset.filter||"all";n.filterTasks(e),f(n.filterTasks(e))}(t.target)}function f(t){var a=document.getElementById("taskList");a&&(a.innerHTML="",t.forEach((function(t){var s=document.createElement("li");s.draggable=!0,s.dataset.taskId=t.id.toString(),s.classList.add("flex","justify-between","border","p-2","mb-4");var i=document.createElement("input");i.type="checkbox",i.checked=t.completed,i.addEventListener("change",(function(){n.toggleTaskCompletion(t.id),(0,e.saveDataToLocalStorage)("tasks",n.tasks),f(n.filterTasks("all"))}));var o=document.createElement("span");o.textContent=t.name,o.classList.add("ml-4","basis-3/4");var d=document.createElement("button");d.innerHTML='<i class="fas fa-edit"></i>',d.classList.add("ml-2","p-2","text-blue-500"),d.addEventListener("click",(function(){var a=document.getElementById("modal");a.classList.remove("hidden");var s=document.getElementById("newTaskName");s.value=t.name,document.getElementById("closeModal").addEventListener("click",(function(){a.classList.add("hidden")}));var i=document.getElementById("updateTaskName");i.addEventListener("click",(function o(){var d=s.value;d&&(n.editTask({id:t.id,newName:d}),(0,e.saveDataToLocalStorage)("tasks",n.tasks),f(n.filterTasks("all")),s.value="",a.classList.add("hidden"),i.removeEventListener("click",o))}))}));var r=document.createElement("button");r.innerHTML='<i class="fa-solid fa-trash-can text-red-600"></i>',r.classList.add("ml-2","p-2"),r.addEventListener("click",(function(){var a=document.getElementById("deleteConfirmationModal");a.classList.remove("hidden");var s=document.getElementById("confirmDelete"),i=document.getElementById("cancelDelete"),o=function(){n.deleteTask(t.id),(0,e.saveDataToLocalStorage)("tasks",n.tasks),f(n.filterTasks("all")),a.classList.add("hidden"),s.removeEventListener("click",o),i.removeEventListener("click",d)},d=function(){a.classList.add("hidden"),s.removeEventListener("click",o),i.removeEventListener("click",d)};s.addEventListener("click",o),i.addEventListener("click",d)})),s.addEventListener("dragstart",(function(e){var a;null===(a=e.dataTransfer)||void 0===a||a.setData("text/plain",t.id.toString())})),s.addEventListener("dragover",(function(t){t.preventDefault()})),s.addEventListener("drop",(function(t){var a;t.preventDefault();var i=parseInt((null===(a=t.dataTransfer)||void 0===a?void 0:a.getData("text/plain"))||"");if(!isNaN(i)){var o=parseInt(s.dataset.taskId||""),d=n.tasks.find((function(t){return t.id===i})),r=n.tasks.find((function(t){return t.id===o}));if(d&&r){var l=n.tasks.indexOf(d),c=n.tasks.indexOf(r);n.tasks.splice(l,1),n.tasks.splice(c,0,d),(0,e.saveDataToLocalStorage)("tasks",n.tasks),f(n.filterTasks("all"))}}})),s.appendChild(i),s.appendChild(o),s.appendChild(d),s.appendChild(r),a.appendChild(s)})))}c.addEventListener("click",(function(){l.classList.remove("hidden")})),u.addEventListener("click",v),m.addEventListener("click",(function(){var t=document.getElementById("newTask"),a=t.value;if(""!==a.trim()){var s={id:n.tasks.length+1,name:a,completed:!1};n.addTask(s),f(n.filterTasks("all")),t.value="",v(),(0,e.saveDataToLocalStorage)("tasks",n.tasks)}})),i.addEventListener("click",k),o.addEventListener("click",k),d.addEventListener("click",k),r.addEventListener("click",(function(){n.clearCompletedTasks(),(0,e.saveDataToLocalStorage)("tasks",n.tasks),f(n.filterTasks("all")),document.querySelectorAll("button[data-filter]").forEach((function(t){return t.classList.remove("bg-blue-500","text-white")}))}));var p=(0,s.getDataFromLocalStorage)("tasks");p&&(n.tasks=p),f(n.filterTasks("all"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,